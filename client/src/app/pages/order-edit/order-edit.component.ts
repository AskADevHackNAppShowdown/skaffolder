/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://beta.skaffolder.com/#!/register?friend=5ce1adcf63897a72058db532
*
* You will get 10% discount for each one of your friends
* 
*/
// Import Libraries
import { Component, OnInit } from '@angular/core';
import { Location } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
// Import Services
import { OrderService } from '../../services/order.service';
import { UserService } from '../../services/user.service';
import { ProductService } from '../../services/product.service';
import { CouponService } from '../../services/coupon.service';
// Import Models
import { Order } from '../../domain/estore_db/order';
import { Coupon } from '../../domain/estore_db/coupon';
import { Product } from '../../domain/estore_db/product';
import { User } from '../../domain/estore_db/user';

// START - USED SERVICES
/**
* OrderService.create
*	@description CRUD ACTION create
*
* OrderService.get
*	@description CRUD ACTION get
*	@param ObjectId id Id 
*
* UserService.list
*	@description CRUD ACTION list
*
* ProductService.list
*	@description CRUD ACTION list
*
* CouponService.list
*	@description CRUD ACTION list
*
* OrderService.update
*	@description CRUD ACTION update
*	@param ObjectId id Id
*
*/
// END - USED SERVICES

/**
 * This component allows to edit a Order
 */
@Component({
    selector: 'app-order-edit',
    templateUrl: 'order-edit.component.html',
    styleUrls: ['order-edit.component.css']
})
export class OrderEditComponent implements OnInit {
    item: Order;
    list_coupon: Coupon[];
    list_products: Product[];
    list_user: User[];
    model: Order;
    formValid: Boolean;

    constructor(
    private orderService: OrderService,
    private userService: UserService,
    private productService: ProductService,
    private couponService: CouponService,
    private route: ActivatedRoute,
    private location: Location) {
        // Init item
        this.item = new Order();
    }

    /**
     * Init
     */
    ngOnInit() {
        this.route.params.subscribe(param => {
            const id: string = param['id'];
            if (id !== 'new') {
                this.orderService.get(id).subscribe(item => this.item = item);
            }
            // Get relations
            this.couponService.list().subscribe(list => this.list_coupon = list);
            this.productService.list().subscribe(list => this.list_products = list);
            this.userService.list().subscribe(list => this.list_user = list);
        });
    }

    /**
     * Check if an Product is in  _products
     *
     * @param {string} id Id of Product to search
     * @returns {boolean} True if it is found
     */
    containProduct(id: string): boolean {
        if (!this.item._products) return false;
        return this.item._products.indexOf(id) !== -1;
    }

    /**
     * Add Product from Order
     *
     * @param {string} id Id of Product to add in this.item._products array
     */
    addProduct(id: string) {
        if (!this.item._products)
            this.item._products = [];
        this.item._products.push(id);
    }

    /**
     * Remove an Product from a Order
     *
     * @param {number} index Index of Product in this.item._products array
     */
    removeProduct(index: number) {
        this.item._products.splice(index, 1);
    }

    /**
     * Save Order
     *
     * @param {boolean} formValid Form validity check
     * @param Order item Order to save
     */
    save(formValid: boolean, item: Order): void {
        this.formValid = formValid;
        if (formValid) {
            if (item._id) {
                this.orderService.update(item).subscribe(data => this.goBack());
            } else {
                this.orderService.create(item).subscribe(data => this.goBack());
            } 
        }
    }

    /**
     * Go Back
     */
    goBack(): void {
        this.location.back();
    }


}



