/*
 * Generated by
 *
 *      _____ _          __  __      _     _
 *     / ____| |        / _|/ _|    | |   | |
 *    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
 *     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
 *     ____) |   < (_| | | | || (_) | | (_| |  __/ |
 *    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
 *
 * The code generator that works in many programming languages
 *
 *			https://www.skaffolder.com
 *
 *
 * You can generate the code from the command-line
 *       https://npmjs.com/package/skaffolder-cli
 *
 *       npm install -g skaffodler-cli
 *
 *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
 *
 * To remove this comment please upgrade your plan here:
 *      https://app.skaffolder.com/#!/upgrade
 *
 * Or get up to 70% discount sharing your unique link:
 *       https://beta.skaffolder.com/#!/register?friend=5ce1adcf63897a72058db532
 *
 * You will get 10% discount for each one of your friends
 *
 */
// Database
import Database from "../../../classes/Database_Estore_db";
import mongoose, { Schema } from "mongoose";

// Logger
import Logger from "../../../classes/Logger";

const generatedModel = {
  /**
   * Init  schema
   */
  init() {
    const db = Database.getConnection();

    /**
     * Order
     */
    const orderSchema = new mongoose.Schema({
      date: {
        type: "Date"
      },
      //RELATIONS
      _coupon: {
        type: Schema.ObjectId,
        ref: "Coupon"
      },
      _products: [
        {
          type: Schema.ObjectId,
          ref: "Product"
        }
      ],
      _user: {
        type: Schema.ObjectId,
        ref: "User"
      }

      //EXTERNAL RELATIONS
      /*
       */
    });

    generatedModel.setModel(db.connection.model("Order", orderSchema));
    return orderSchema;
  },

  /**
   * Set Model
   */
  setModel: model => {
    generatedModel.model = model;
  },

  /**
   * Get model
   */
  getModel: () => {
    return generatedModel.model;
  },

  // Start queries

  // CRUD METHODS

  /**
   * OrderModel.create
   *   @description CRUD ACTION create
   *
   */
  async create(item) {
    const obj = new this.getModel()(item);
    return await obj.save();
  },

  /**
   * OrderModel.delete
   *   @description CRUD ACTION delete
   *   @param ObjectId id Id
   *
   */
  async delete(id) {
    return await this.getModel().findByIdAndRemove(id);
  },

  /**
   * OrderModel.findBy_coupon
   *   @description CRUD ACTION findBy_coupon
   *   @param Objectid key Id della risorsa _coupon da cercare
   *
   */
  async findBy_coupon(key) {
    return await this.getModel().find({ _coupon: key });
  },

  /**
   * OrderModel.findBy_products
   *   @description CRUD ACTION findBy_products
   *   @param Objectid key Id della risorsa _products da cercare
   *
   */
  async findBy_products(key) {
    return await this.getModel().find({ _products: key });
  },

  /**
   * OrderModel.get
   *   @description CRUD ACTION get
   *   @param ObjectId id Id
   *
   */
  async get(id) {
    return await this.getModel().findOne({ _id: id });
  },

  /**
   * OrderModel.list
   *   @description CRUD ACTION list
   *
   */
  async list() {
    return await this.getModel().find();
  },

  /**
   * OrderModel.update
   *   @description CRUD ACTION update
   *   @param ObjectId id Id
   *
   */
  async update(item) {
    return await this.getModel().findOneAndUpdate({ _id: item._id }, item, {
      new: true
    });
  }
};

export default generatedModel;
